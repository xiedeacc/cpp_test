// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: config.proto

#include "config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace bazel_template {
namespace proto {
class BaseConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BaseConfig> _instance;
} _BaseConfig_default_instance_;
}  // namespace proto
}  // namespace bazel_template
static void InitDefaultsscc_info_BaseConfig_config_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bazel_template::proto::_BaseConfig_default_instance_;
    new (ptr) ::bazel_template::proto::BaseConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bazel_template::proto::BaseConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BaseConfig_config_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BaseConfig_config_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_config_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_config_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_config_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_config_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bazel_template::proto::BaseConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bazel_template::proto::BaseConfig, server_addr_),
  PROTOBUF_FIELD_OFFSET(::bazel_template::proto::BaseConfig, grpc_server_port_),
  PROTOBUF_FIELD_OFFSET(::bazel_template::proto::BaseConfig, http_server_port_),
  PROTOBUF_FIELD_OFFSET(::bazel_template::proto::BaseConfig, metric_ratio_),
  PROTOBUF_FIELD_OFFSET(::bazel_template::proto::BaseConfig, metric_interval_sec_),
  PROTOBUF_FIELD_OFFSET(::bazel_template::proto::BaseConfig, discard_ratio_),
  PROTOBUF_FIELD_OFFSET(::bazel_template::proto::BaseConfig, thread_pool_size_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::bazel_template::proto::BaseConfig)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bazel_template::proto::_BaseConfig_default_instance_),
};

const char descriptor_table_protodef_config_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014config.proto\022\024bazel_template.proto\"\271\001\n"
  "\nBaseConfig\022\023\n\013server_addr\030\001 \001(\t\022\030\n\020grpc"
  "_server_port\030\002 \001(\r\022\030\n\020http_server_port\030\003"
  " \001(\r\022\024\n\014metric_ratio\030\004 \001(\r\022\033\n\023metric_int"
  "erval_sec\030\005 \001(\r\022\025\n\rdiscard_ratio\030\006 \001(\r\022\030"
  "\n\020thread_pool_size\030\007 \001(\rb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_config_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_config_2eproto_sccs[1] = {
  &scc_info_BaseConfig_config_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_config_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_config_2eproto = {
  false, false, descriptor_table_protodef_config_2eproto, "config.proto", 232,
  &descriptor_table_config_2eproto_once, descriptor_table_config_2eproto_sccs, descriptor_table_config_2eproto_deps, 1, 0,
  schemas, file_default_instances, TableStruct_config_2eproto::offsets,
  file_level_metadata_config_2eproto, 1, file_level_enum_descriptors_config_2eproto, file_level_service_descriptors_config_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_config_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_config_2eproto)), true);
namespace bazel_template {
namespace proto {

// ===================================================================

void BaseConfig::InitAsDefaultInstance() {
}
class BaseConfig::_Internal {
 public:
};

BaseConfig::BaseConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bazel_template.proto.BaseConfig)
}
BaseConfig::BaseConfig(const BaseConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  server_addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_server_addr().empty()) {
    server_addr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_server_addr(),
      GetArena());
  }
  ::memcpy(&grpc_server_port_, &from.grpc_server_port_,
    static_cast<size_t>(reinterpret_cast<char*>(&thread_pool_size_) -
    reinterpret_cast<char*>(&grpc_server_port_)) + sizeof(thread_pool_size_));
  // @@protoc_insertion_point(copy_constructor:bazel_template.proto.BaseConfig)
}

void BaseConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BaseConfig_config_2eproto.base);
  server_addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&grpc_server_port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&thread_pool_size_) -
      reinterpret_cast<char*>(&grpc_server_port_)) + sizeof(thread_pool_size_));
}

BaseConfig::~BaseConfig() {
  // @@protoc_insertion_point(destructor:bazel_template.proto.BaseConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BaseConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  server_addr_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BaseConfig::ArenaDtor(void* object) {
  BaseConfig* _this = reinterpret_cast< BaseConfig* >(object);
  (void)_this;
}
void BaseConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BaseConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BaseConfig& BaseConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BaseConfig_config_2eproto.base);
  return *internal_default_instance();
}


void BaseConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:bazel_template.proto.BaseConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  server_addr_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&grpc_server_port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&thread_pool_size_) -
      reinterpret_cast<char*>(&grpc_server_port_)) + sizeof(thread_pool_size_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BaseConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string server_addr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_server_addr();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bazel_template.proto.BaseConfig.server_addr"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 grpc_server_port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          grpc_server_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 http_server_port = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          http_server_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 metric_ratio = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          metric_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 metric_interval_sec = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          metric_interval_sec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 discard_ratio = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          discard_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 thread_pool_size = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          thread_pool_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BaseConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bazel_template.proto.BaseConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string server_addr = 1;
  if (this->server_addr().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_server_addr().data(), static_cast<int>(this->_internal_server_addr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bazel_template.proto.BaseConfig.server_addr");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_server_addr(), target);
  }

  // uint32 grpc_server_port = 2;
  if (this->grpc_server_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_grpc_server_port(), target);
  }

  // uint32 http_server_port = 3;
  if (this->http_server_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_http_server_port(), target);
  }

  // uint32 metric_ratio = 4;
  if (this->metric_ratio() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_metric_ratio(), target);
  }

  // uint32 metric_interval_sec = 5;
  if (this->metric_interval_sec() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_metric_interval_sec(), target);
  }

  // uint32 discard_ratio = 6;
  if (this->discard_ratio() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_discard_ratio(), target);
  }

  // uint32 thread_pool_size = 7;
  if (this->thread_pool_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_thread_pool_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bazel_template.proto.BaseConfig)
  return target;
}

size_t BaseConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bazel_template.proto.BaseConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string server_addr = 1;
  if (this->server_addr().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_server_addr());
  }

  // uint32 grpc_server_port = 2;
  if (this->grpc_server_port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_grpc_server_port());
  }

  // uint32 http_server_port = 3;
  if (this->http_server_port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_http_server_port());
  }

  // uint32 metric_ratio = 4;
  if (this->metric_ratio() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_metric_ratio());
  }

  // uint32 metric_interval_sec = 5;
  if (this->metric_interval_sec() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_metric_interval_sec());
  }

  // uint32 discard_ratio = 6;
  if (this->discard_ratio() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_discard_ratio());
  }

  // uint32 thread_pool_size = 7;
  if (this->thread_pool_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_thread_pool_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BaseConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bazel_template.proto.BaseConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const BaseConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BaseConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bazel_template.proto.BaseConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bazel_template.proto.BaseConfig)
    MergeFrom(*source);
  }
}

void BaseConfig::MergeFrom(const BaseConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bazel_template.proto.BaseConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.server_addr().size() > 0) {
    _internal_set_server_addr(from._internal_server_addr());
  }
  if (from.grpc_server_port() != 0) {
    _internal_set_grpc_server_port(from._internal_grpc_server_port());
  }
  if (from.http_server_port() != 0) {
    _internal_set_http_server_port(from._internal_http_server_port());
  }
  if (from.metric_ratio() != 0) {
    _internal_set_metric_ratio(from._internal_metric_ratio());
  }
  if (from.metric_interval_sec() != 0) {
    _internal_set_metric_interval_sec(from._internal_metric_interval_sec());
  }
  if (from.discard_ratio() != 0) {
    _internal_set_discard_ratio(from._internal_discard_ratio());
  }
  if (from.thread_pool_size() != 0) {
    _internal_set_thread_pool_size(from._internal_thread_pool_size());
  }
}

void BaseConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bazel_template.proto.BaseConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BaseConfig::CopyFrom(const BaseConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bazel_template.proto.BaseConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BaseConfig::IsInitialized() const {
  return true;
}

void BaseConfig::InternalSwap(BaseConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  server_addr_.Swap(&other->server_addr_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BaseConfig, thread_pool_size_)
      + sizeof(BaseConfig::thread_pool_size_)
      - PROTOBUF_FIELD_OFFSET(BaseConfig, grpc_server_port_)>(
          reinterpret_cast<char*>(&grpc_server_port_),
          reinterpret_cast<char*>(&other->grpc_server_port_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BaseConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace bazel_template
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::bazel_template::proto::BaseConfig* Arena::CreateMaybeMessage< ::bazel_template::proto::BaseConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bazel_template::proto::BaseConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
