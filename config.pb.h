// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_config_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_config_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_config_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_config_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_config_2eproto;
namespace bazel_template {
namespace proto {
class BaseConfig;
class BaseConfigDefaultTypeInternal;
extern BaseConfigDefaultTypeInternal _BaseConfig_default_instance_;
}  // namespace proto
}  // namespace bazel_template
PROTOBUF_NAMESPACE_OPEN
template<> ::bazel_template::proto::BaseConfig* Arena::CreateMaybeMessage<::bazel_template::proto::BaseConfig>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace bazel_template {
namespace proto {

// ===================================================================

class BaseConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bazel_template.proto.BaseConfig) */ {
 public:
  inline BaseConfig() : BaseConfig(nullptr) {};
  virtual ~BaseConfig();

  BaseConfig(const BaseConfig& from);
  BaseConfig(BaseConfig&& from) noexcept
    : BaseConfig() {
    *this = ::std::move(from);
  }

  inline BaseConfig& operator=(const BaseConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline BaseConfig& operator=(BaseConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BaseConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BaseConfig* internal_default_instance() {
    return reinterpret_cast<const BaseConfig*>(
               &_BaseConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BaseConfig& a, BaseConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(BaseConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BaseConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BaseConfig* New() const final {
    return CreateMaybeMessage<BaseConfig>(nullptr);
  }

  BaseConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BaseConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BaseConfig& from);
  void MergeFrom(const BaseConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BaseConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bazel_template.proto.BaseConfig";
  }
  protected:
  explicit BaseConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_config_2eproto);
    return ::descriptor_table_config_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServerAddrFieldNumber = 1,
    kGrpcServerPortFieldNumber = 2,
    kHttpServerPortFieldNumber = 3,
    kMetricRatioFieldNumber = 4,
    kMetricIntervalSecFieldNumber = 5,
    kDiscardRatioFieldNumber = 6,
    kThreadPoolSizeFieldNumber = 7,
  };
  // string server_addr = 1;
  void clear_server_addr();
  const std::string& server_addr() const;
  void set_server_addr(const std::string& value);
  void set_server_addr(std::string&& value);
  void set_server_addr(const char* value);
  void set_server_addr(const char* value, size_t size);
  std::string* mutable_server_addr();
  std::string* release_server_addr();
  void set_allocated_server_addr(std::string* server_addr);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_server_addr();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_server_addr(
      std::string* server_addr);
  private:
  const std::string& _internal_server_addr() const;
  void _internal_set_server_addr(const std::string& value);
  std::string* _internal_mutable_server_addr();
  public:

  // uint32 grpc_server_port = 2;
  void clear_grpc_server_port();
  ::PROTOBUF_NAMESPACE_ID::uint32 grpc_server_port() const;
  void set_grpc_server_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_grpc_server_port() const;
  void _internal_set_grpc_server_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 http_server_port = 3;
  void clear_http_server_port();
  ::PROTOBUF_NAMESPACE_ID::uint32 http_server_port() const;
  void set_http_server_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_http_server_port() const;
  void _internal_set_http_server_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 metric_ratio = 4;
  void clear_metric_ratio();
  ::PROTOBUF_NAMESPACE_ID::uint32 metric_ratio() const;
  void set_metric_ratio(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_metric_ratio() const;
  void _internal_set_metric_ratio(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 metric_interval_sec = 5;
  void clear_metric_interval_sec();
  ::PROTOBUF_NAMESPACE_ID::uint32 metric_interval_sec() const;
  void set_metric_interval_sec(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_metric_interval_sec() const;
  void _internal_set_metric_interval_sec(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 discard_ratio = 6;
  void clear_discard_ratio();
  ::PROTOBUF_NAMESPACE_ID::uint32 discard_ratio() const;
  void set_discard_ratio(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_discard_ratio() const;
  void _internal_set_discard_ratio(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 thread_pool_size = 7;
  void clear_thread_pool_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 thread_pool_size() const;
  void set_thread_pool_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_thread_pool_size() const;
  void _internal_set_thread_pool_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:bazel_template.proto.BaseConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr server_addr_;
  ::PROTOBUF_NAMESPACE_ID::uint32 grpc_server_port_;
  ::PROTOBUF_NAMESPACE_ID::uint32 http_server_port_;
  ::PROTOBUF_NAMESPACE_ID::uint32 metric_ratio_;
  ::PROTOBUF_NAMESPACE_ID::uint32 metric_interval_sec_;
  ::PROTOBUF_NAMESPACE_ID::uint32 discard_ratio_;
  ::PROTOBUF_NAMESPACE_ID::uint32 thread_pool_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_config_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BaseConfig

// string server_addr = 1;
inline void BaseConfig::clear_server_addr() {
  server_addr_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& BaseConfig::server_addr() const {
  // @@protoc_insertion_point(field_get:bazel_template.proto.BaseConfig.server_addr)
  return _internal_server_addr();
}
inline void BaseConfig::set_server_addr(const std::string& value) {
  _internal_set_server_addr(value);
  // @@protoc_insertion_point(field_set:bazel_template.proto.BaseConfig.server_addr)
}
inline std::string* BaseConfig::mutable_server_addr() {
  // @@protoc_insertion_point(field_mutable:bazel_template.proto.BaseConfig.server_addr)
  return _internal_mutable_server_addr();
}
inline const std::string& BaseConfig::_internal_server_addr() const {
  return server_addr_.Get();
}
inline void BaseConfig::_internal_set_server_addr(const std::string& value) {
  
  server_addr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BaseConfig::set_server_addr(std::string&& value) {
  
  server_addr_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bazel_template.proto.BaseConfig.server_addr)
}
inline void BaseConfig::set_server_addr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  server_addr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:bazel_template.proto.BaseConfig.server_addr)
}
inline void BaseConfig::set_server_addr(const char* value,
    size_t size) {
  
  server_addr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bazel_template.proto.BaseConfig.server_addr)
}
inline std::string* BaseConfig::_internal_mutable_server_addr() {
  
  return server_addr_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BaseConfig::release_server_addr() {
  // @@protoc_insertion_point(field_release:bazel_template.proto.BaseConfig.server_addr)
  return server_addr_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BaseConfig::set_allocated_server_addr(std::string* server_addr) {
  if (server_addr != nullptr) {
    
  } else {
    
  }
  server_addr_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), server_addr,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bazel_template.proto.BaseConfig.server_addr)
}
inline std::string* BaseConfig::unsafe_arena_release_server_addr() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bazel_template.proto.BaseConfig.server_addr)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return server_addr_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void BaseConfig::unsafe_arena_set_allocated_server_addr(
    std::string* server_addr) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (server_addr != nullptr) {
    
  } else {
    
  }
  server_addr_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      server_addr, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bazel_template.proto.BaseConfig.server_addr)
}

// uint32 grpc_server_port = 2;
inline void BaseConfig::clear_grpc_server_port() {
  grpc_server_port_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BaseConfig::_internal_grpc_server_port() const {
  return grpc_server_port_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BaseConfig::grpc_server_port() const {
  // @@protoc_insertion_point(field_get:bazel_template.proto.BaseConfig.grpc_server_port)
  return _internal_grpc_server_port();
}
inline void BaseConfig::_internal_set_grpc_server_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  grpc_server_port_ = value;
}
inline void BaseConfig::set_grpc_server_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_grpc_server_port(value);
  // @@protoc_insertion_point(field_set:bazel_template.proto.BaseConfig.grpc_server_port)
}

// uint32 http_server_port = 3;
inline void BaseConfig::clear_http_server_port() {
  http_server_port_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BaseConfig::_internal_http_server_port() const {
  return http_server_port_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BaseConfig::http_server_port() const {
  // @@protoc_insertion_point(field_get:bazel_template.proto.BaseConfig.http_server_port)
  return _internal_http_server_port();
}
inline void BaseConfig::_internal_set_http_server_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  http_server_port_ = value;
}
inline void BaseConfig::set_http_server_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_http_server_port(value);
  // @@protoc_insertion_point(field_set:bazel_template.proto.BaseConfig.http_server_port)
}

// uint32 metric_ratio = 4;
inline void BaseConfig::clear_metric_ratio() {
  metric_ratio_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BaseConfig::_internal_metric_ratio() const {
  return metric_ratio_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BaseConfig::metric_ratio() const {
  // @@protoc_insertion_point(field_get:bazel_template.proto.BaseConfig.metric_ratio)
  return _internal_metric_ratio();
}
inline void BaseConfig::_internal_set_metric_ratio(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  metric_ratio_ = value;
}
inline void BaseConfig::set_metric_ratio(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_metric_ratio(value);
  // @@protoc_insertion_point(field_set:bazel_template.proto.BaseConfig.metric_ratio)
}

// uint32 metric_interval_sec = 5;
inline void BaseConfig::clear_metric_interval_sec() {
  metric_interval_sec_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BaseConfig::_internal_metric_interval_sec() const {
  return metric_interval_sec_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BaseConfig::metric_interval_sec() const {
  // @@protoc_insertion_point(field_get:bazel_template.proto.BaseConfig.metric_interval_sec)
  return _internal_metric_interval_sec();
}
inline void BaseConfig::_internal_set_metric_interval_sec(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  metric_interval_sec_ = value;
}
inline void BaseConfig::set_metric_interval_sec(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_metric_interval_sec(value);
  // @@protoc_insertion_point(field_set:bazel_template.proto.BaseConfig.metric_interval_sec)
}

// uint32 discard_ratio = 6;
inline void BaseConfig::clear_discard_ratio() {
  discard_ratio_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BaseConfig::_internal_discard_ratio() const {
  return discard_ratio_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BaseConfig::discard_ratio() const {
  // @@protoc_insertion_point(field_get:bazel_template.proto.BaseConfig.discard_ratio)
  return _internal_discard_ratio();
}
inline void BaseConfig::_internal_set_discard_ratio(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  discard_ratio_ = value;
}
inline void BaseConfig::set_discard_ratio(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_discard_ratio(value);
  // @@protoc_insertion_point(field_set:bazel_template.proto.BaseConfig.discard_ratio)
}

// uint32 thread_pool_size = 7;
inline void BaseConfig::clear_thread_pool_size() {
  thread_pool_size_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BaseConfig::_internal_thread_pool_size() const {
  return thread_pool_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BaseConfig::thread_pool_size() const {
  // @@protoc_insertion_point(field_get:bazel_template.proto.BaseConfig.thread_pool_size)
  return _internal_thread_pool_size();
}
inline void BaseConfig::_internal_set_thread_pool_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  thread_pool_size_ = value;
}
inline void BaseConfig::set_thread_pool_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_thread_pool_size(value);
  // @@protoc_insertion_point(field_set:bazel_template.proto.BaseConfig.thread_pool_size)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace bazel_template

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_config_2eproto
